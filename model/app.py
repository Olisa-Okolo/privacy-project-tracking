from flask import Flask, request, jsonify
import joblib
import numpy as np
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

# Load the model
model = joblib.load('trackers_model.joblib')

trackers = ['google_tag_manager',
 'google_analytics',
 'google',
 'google_syndication',
 'sentry',
 'google_fonts',
 'gravatar',
 'doubleclick',
 'twitter',
 'youtube',
 'twitter_syndication',
 'googleapis.com',
 'kaspersky-labs.com',
 'dailymotion',
 'gstatic',
 'jetpack',
 'wordpress_stats',
 'pubmatic',
 'fontawesome_com',
 'criteo',
 'lotame',
 'index_exchange',
 'appnexus',
 'rubicon',
 'sovrn',
 'tradedesk',
 'liveramp',
 'facebook_cdn',
 'doubleverify',
 'jsdelivr',
 'onetrust',
 'google_adservices',
 'amazon_web_services',
 'amazon_adsystem',
 'triplelift',
 'smart_adserver',
 'yahoo',
 'improve_digital',
 'openx',
 'bidswitch',
 'adform',
 'yahoo_analytics',
 'rtb_house',
 'quantcast',
 'adobe_audience_manager',
 'cloudflare',
 'bluekai',
 'adition',
 'facebook',
 'amazon_cloudfront',
 'integral_ad_science',
 'amazon_cdn',
 'moat',
 'taboola',
 'twitter_ads',
 'onesignal',
 'bootstrap',
 '1plusx',
 'new_relic',
 'akamai_technologies',
 'yieldlab',
 'adobe_typekit',
 'rtl_group',
 'clever_push',
 'otto.de',
 'outbrain',
 'vg_wort',
 'google_photos',
 'infonline',
 'reddit',
 'seeding_alliance',
 'trusted_shops',
 'addthis',
 'jw_player',
 'tiktok_analytics',
 'gemius',
 'chartbeat',
 'yandex_metrika',
 'paypal',
 'google_users',
 'microsoft',
 'disqus',
 'stripe.com',
 'media.net',
 'teads',
 'jquery',
 'liveinternet',
 'iab_consent',
 'bugsnag',
 'yandex',
 'vkontakte',
 'mail.ru_group',
 'united_internet_media_gmbh',
 '1und1',
 'tealium',
 'bing_ads',
 'optimizely',
 'schneevonmorgen.com',
 'optanaon',
 'scorecard_research_beacon',
 'didomi',
 'hubvisor.io',
 'unpkg.com',
 'tremor_video',
 'heap',
 'hotjar',
 'qualtrics',
 'live_intent',
 'netratings_sitecensus',
 'yieldlove',
 'adscale',
 'microsoft_clarity',
 'spotxchange',
 'pinterest',
 'krux_digital',
 'speedcurve',
 'exoclick',
 'traffic_stars',
 'at_internet',
 'mbr_targeting',
 'aggregate_knowledge',
 'adobe_dynamic_tag_management',
 'adobe_experience_cloud',
 'linkedin_analytics',
 'usabilla',
 'polyfill.io',
 'amplitude',
 'parsely',
 'videoplayerhub.com',
 'spot.im',
 'the_adex',
 'aaxads.com',
 'userreport',
 'soasta_mpulse',
 'kampyle',
 'stroer_digital_media',
 'ispot.tv',
 'ad_lightning',
 'cookiebot',
 'branch_metrics',
 'snapchat',
 'wikimedia.org',
 'azureedge.net',
 'crazy_egg',
 'liveperson',
 'yahoo_japan_retargeting',
 'nativo',
 'tag_commander',
 'contentsquare.net',
 'onetag',
 'datadome',
 'segment',
 'kameleoon',
 'xhamster',
 'sailthru_horizon',
 'shopify_stats',
 'ebay',
 'ab_tasty',
 'le_monde.fr',
 'orange',
 'woopic.com']

@app.route('/predict', methods=['POST'])
def predict():
    # Get data from POST request
    data = request.get_json()
    
    # Convert to numpy array
    features = np.array(data['features']).reshape(1, -1)
    
    # Predict
    prediction = model.predict(features)

    res = [trackers[i] for i,val in enumerate(prediction[0]) if val == 1] 
    print(res)
    
    # Return prediction
    return jsonify({'trackers': res})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)